# Doris periodic backup job

kind: CronJob
apiVersion: batch/v1
metadata:
  name: basic-doris-backup-scheduler
  labels:
    app.kubernetes.io/name: doris-cluster
    app.kubernetes.io/instance: basic
    app.kubernetes.io/component: backup-scheduler
    app.kubernetes.io/managed-by: doris-operator

spec:
  schedule: "*/2 * * * *"
  startingDeadlineSeconds: 600
  concurrencyPolicy: Forbid

  jobTemplate:
    spec:
      parallelism: 1
      backoffLimit: 6
      template:
        metadata:
          labels:
            app.kubernetes.io/name: doris-cluster
            app.kubernetes.io/instance: basic
            app.kubernetes.io/component: initializer
            app.kubernetes.io/managed-by: doris-operator
            doris.apache.org/initializer: initialize-basic
        spec:
          restartPolicy: OnFailure
          volumes:
            - name: check-conn-script
              configMap:
                name: basic-doris-backup-scheduler
                defaultMode: 420
                items:
                  - key: check-conn-script
                    path: check_conn.sh
            - name: backup-script
              configMap:
                name: basic-doris-backup-scheduler
                defaultMode: 420
                items:
                  - key: backup-script
                    path: backup.py
          # init container: checking fe query connection.
          initContainers:
            - name: wait
              image: 'tnir/mysqlclient'
              command: [ 'sh', '/usr/local/bin/check_conn.sh' ]
              volumeMounts:
                - name: check-conn-script
                  mountPath: /usr/local/bin/check_conn.sh
                  subPath: check_conn.sh
                  readOnly: true
              env:
                - name: FE_SVC
                  value: basic-fe
                - name: FE_QUERY_PORT
                  value: '9030'

          # main container: execute backup script
          containers:
            - name: mysql-client
              image: 'tnir/mysqlclient'
              command: [ 'python', '/usr/local/bin/backup.py' ]
              volumeMounts:
                - name: backup-script
                  mountPath: /usr/local/bin/backup.py
                  subPath: backup.py
                  readOnly: true
              env:
                - name: FE_SVC
                  value: basic-fe
                - name: FE_QUERY_PORT
                  value: '9030'
                - name: ACC_USER
                  valueFrom:
                    secretKeyRef:
                      name: basic-opr-account
                      key: user
                - name: ACC_PWD
                  valueFrom:
                    secretKeyRef:
                      name: basic-opr-account
                      key: password
                - name: DATABASE
                  value: 'example_db'
                - name: REPO_NAME
                  value: 'example_repo'
                - name: CREATE_REPO_SQL
                  valueFrom:
                    configMapKeyRef:
                      key: create-repo-sql
                - name: BACKUP_SQL
                  valueFrom:
                    configMapKeyRef:
                      key: backup-sql

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: basic-doris-backup-scheduler
  labels:
    app.kubernetes.io/name: doris-cluster
    app.kubernetes.io/instance: basic
    app.kubernetes.io/component: backup-scheduler
    app.kubernetes.io/managed-by: doris-operator
data:
  create-repo-sql: |
    CREATE REPOSITORY `example_repo`
    WITH BROKER `hdfs_broker`
    ON LOCATION "hdfs://hadoop-name-node:54310/path/to/repo/"
    PROPERTIES
    (
       "username" = "user",
       "password" = "password"
    );
  backup-sql: |
    BACKUP SNAPSHOT example_db.snapshot_label1
    TO example_repo
    ON (example_tbl)
    PROPERTIES ("type" = "full");

  check-conn-script: |
    "see: check-conn.sh"
  backup-script: |
    "see: backup.py"

